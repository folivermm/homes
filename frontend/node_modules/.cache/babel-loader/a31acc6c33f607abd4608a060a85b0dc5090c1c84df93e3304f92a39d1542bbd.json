{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\";\n\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * @param {string} url - The URL for the request.\r\n * @param {object} options - Any options for the fetch.\r\n * @param {any} onCancel - Value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>} - A promise that resolves to the `json` data or an error.\r\n *                               If the response is not in the 200 - 399 range, the promise is rejected.\r\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status === 204) {\n      return null; // No content\n    }\n\n    const payload = await response.json();\n    if (payload.error) {\n      return Promise.reject({\n        message: payload.error\n      });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\r\n * GET request to retrieve a list of homes\r\n * @returns {Promise<Array>} - A promise that resolves to an array of home objects.\r\n */\nexport function listHomes() {\n  const url = `${API_BASE_URL}/homes`;\n  return fetchJson(url, {\n    headers\n  });\n}\n\n// export async function getHomeWithRealtor(id) {\n//     try {\n//         const homeUrl = `${API_BASE_URL}/homes/${id}`;\n//         const realtorUrl = `${API_BASE_URL}/homes/${id}/realtor`; // Adjust the URL to match your API structure\n\n//         // Fetch both home and realtor data concurrently\n//         const [homeData, realtorData] = await Promise.all([\n//             fetchJson(homeUrl, { headers }),\n//             fetchJson(realtorUrl, { headers }),\n//         ]);\n\n//         // Combine the data into a single object\n//         const homeWithRealtor = { ...homeData, realtor: realtorData };\n\n//         return homeWithRealtor;\n//     } catch (error) {\n//         console.error('Error fetching home with realtor:', error);\n//         throw error;\n//     }\n// }\nexport async function getHomeWithRealtor(id) {\n  try {\n    const homeUrl = `${API_BASE_URL}/homes/${id}`;\n    // Fetch the home data\n    const homeData = await fetchJson(homeUrl, {\n      headers\n    });\n    // Return the home data directly\n    return homeData;\n  } catch (error) {\n    console.error('Error fetching home with realtor:', error);\n    throw error;\n  }\n}\n\n/**\r\n * POST request to create a new home\r\n * @param {object} home - The home object to create.\r\n * @returns {Promise<object>} - A promise that resolves to the created home object.\r\n */\nexport function createHome(home) {\n  const url = `${API_BASE_URL}/homes`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(home)\n  };\n  return fetchJson(url, options);\n}\n\n/**\r\n * PUT request to update a home by ID\r\n * @param {string} id - The ID of the home to update.\r\n * @param {object} home - The updated home object.\r\n * @returns {Promise<object>} - A promise that resolves to the updated home object.\r\n */\nexport function updateHome(id, home) {\n  const url = `${API_BASE_URL}/homes/${id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(home)\n  };\n  return fetchJson(url, options);\n}\n\n/**\r\n * DELETE request to delete a home by ID\r\n * @param {string} id - The ID of the home to delete.\r\n * @returns {Promise} - A promise that resolves when the deletion is successful.\r\n */\nexport function deleteHome(id) {\n  const url = `${API_BASE_URL}/homes/${id}`;\n  const options = {\n    method: \"DELETE\",\n    headers\n  };\n  return fetchJson(url, options);\n}","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","listHomes","getHomeWithRealtor","id","homeUrl","homeData","createHome","home","method","body","JSON","stringify","updateHome","deleteHome"],"sources":["C:/Users/foliv/Desktop/homes/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL =\r\n    process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * @param {string} url - The URL for the request.\r\n * @param {object} options - Any options for the fetch.\r\n * @param {any} onCancel - Value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>} - A promise that resolves to the `json` data or an error.\r\n *                               If the response is not in the 200 - 399 range, the promise is rejected.\r\n */\r\nasync function fetchJson(url, options, onCancel) {\r\n    try {\r\n        const response = await fetch(url, options);\r\n\r\n        if (response.status === 204) {\r\n            return null; // No content\r\n        }\r\n\r\n        const payload = await response.json();\r\n\r\n        if (payload.error) {\r\n            return Promise.reject({ message: payload.error });\r\n        }\r\n\r\n        return payload.data;\r\n    } catch (error) {\r\n        if (error.name !== \"AbortError\") {\r\n            console.error(error.stack);\r\n            throw error;\r\n        }\r\n\r\n        return Promise.resolve(onCancel);\r\n    }\r\n}\r\n\r\n/**\r\n * GET request to retrieve a list of homes\r\n * @returns {Promise<Array>} - A promise that resolves to an array of home objects.\r\n */\r\nexport function listHomes() {\r\n    const url = `${API_BASE_URL}/homes`;\r\n    return fetchJson(url, { headers });\r\n}\r\n\r\n\r\n// export async function getHomeWithRealtor(id) {\r\n//     try {\r\n//         const homeUrl = `${API_BASE_URL}/homes/${id}`;\r\n//         const realtorUrl = `${API_BASE_URL}/homes/${id}/realtor`; // Adjust the URL to match your API structure\r\n\r\n//         // Fetch both home and realtor data concurrently\r\n//         const [homeData, realtorData] = await Promise.all([\r\n//             fetchJson(homeUrl, { headers }),\r\n//             fetchJson(realtorUrl, { headers }),\r\n//         ]);\r\n\r\n//         // Combine the data into a single object\r\n//         const homeWithRealtor = { ...homeData, realtor: realtorData };\r\n\r\n//         return homeWithRealtor;\r\n//     } catch (error) {\r\n//         console.error('Error fetching home with realtor:', error);\r\n//         throw error;\r\n//     }\r\n// }\r\nexport async function getHomeWithRealtor(id) {\r\n    try {\r\n        const homeUrl = `${API_BASE_URL}/homes/${id}`;\r\n        // Fetch the home data\r\n        const homeData = await fetchJson(homeUrl, { headers });\r\n        // Return the home data directly\r\n        return homeData;\r\n    } catch (error) {\r\n        console.error('Error fetching home with realtor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * POST request to create a new home\r\n * @param {object} home - The home object to create.\r\n * @returns {Promise<object>} - A promise that resolves to the created home object.\r\n */\r\nexport function createHome(home) {\r\n    const url = `${API_BASE_URL}/homes`;\r\n    const options = {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(home),\r\n    };\r\n    return fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * PUT request to update a home by ID\r\n * @param {string} id - The ID of the home to update.\r\n * @param {object} home - The updated home object.\r\n * @returns {Promise<object>} - A promise that resolves to the updated home object.\r\n */\r\nexport function updateHome(id, home) {\r\n    const url = `${API_BASE_URL}/homes/${id}`;\r\n    const options = {\r\n        method: \"PUT\",\r\n        headers,\r\n        body: JSON.stringify(home),\r\n    };\r\n    return fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * DELETE request to delete a home by ID\r\n * @param {string} id - The ID of the home to delete.\r\n * @returns {Promise} - A promise that resolves when the deletion is successful.\r\n */\r\nexport function deleteHome(id) {\r\n    const url = `${API_BASE_URL}/homes/${id}`;\r\n    const options = {\r\n        method: \"DELETE\",\r\n        headers,\r\n    };\r\n    return fetchJson(url, options);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}