{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||\"http://localhost:5001\";/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */const headers=new Headers();headers.append(\"Content-Type\",\"application/json\");/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * @param {string} url - The URL for the request.\r\n * @param {object} options - Any options for the fetch.\r\n * @param {any} onCancel - Value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>} - A promise that resolves to the `json` data or an error.\r\n *                               If the response is not in the 200 - 399 range, the promise is rejected.\r\n */async function fetchJson(url,options,onCancel){try{const response=await fetch(url,options);if(response.status===204){return null;// No content\n}const payload=await response.json();if(payload.error){return Promise.reject({message:payload.error});}return payload.data;}catch(error){if(error.name!==\"AbortError\"){console.error(error.stack);throw error;}return Promise.resolve(onCancel);}}// utils/formatDate.js\nexport function formatDateTime(dateString){const options={year:'numeric',month:'long',day:'numeric',hour:'numeric',minute:'numeric'};return new Date(dateString).toLocaleDateString(undefined,options);}/**\r\n * GET request to retrieve a list of homes\r\n * @returns {Promise<Array>} - A promise that resolves to an array of home objects.\r\n */export function listHomes(){const url=\"\".concat(API_BASE_URL,\"/homes\");return fetchJson(url,{headers});}export async function getHomeWithRealtor(id){try{const homeUrl=\"\".concat(API_BASE_URL,\"/homes/\").concat(id);// Fetch the home data\nconst homeData=await fetchJson(homeUrl,{headers});// Return the home data directly\nreturn homeData;}catch(error){console.error('Error fetching home with realtor:',error);throw error;}}/**\r\n * POST request to create a new home\r\n * @param {object} home - The home object to create.\r\n * @returns {Promise<object>} - A promise that resolves to the created home object.\r\n */export function createHome(home){const url=\"\".concat(API_BASE_URL,\"/homes\");const options={method:\"POST\",headers,body:JSON.stringify(home)};return fetchJson(url,options);}/**\r\n * GET request to retrieve a list of realtors\r\n * @returns {Promise<Array>} - A promise that resolves to an array of realtor objects.\r\n */export function listRealtors(){const url=\"\".concat(API_BASE_URL,\"/realtors\");return fetchJson(url,{headers});}// /**\n//  * PUT request to update a home by ID\n//  * @param {string} id - The ID of the home to update.\n//  * @param {object} home - The updated home object.\n//  * @returns {Promise<object>} - A promise that resolves to the updated home object.\n//  */\n// export function updateHome(id, home) {\n//     const url = `${API_BASE_URL}/homes/${id}`;\n//     const options = {\n//         method: \"PUT\",\n//         headers,\n//         body: JSON.stringify(home),\n//     };\n//     return fetchJson(url, options);\n// }\n// /**\n//  * DELETE request to delete a home by ID\n//  * @param {string} id - The ID of the home to delete.\n//  * @returns {Promise} - A promise that resolves when the deletion is successful.\n//  */\n// export function deleteHome(id) {\n//     const url = `${API_BASE_URL}/homes/${id}`;\n//     const options = {\n//         method: \"DELETE\",\n//         headers,\n//     };\n//     return fetchJson(url, options);\n// }","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","headers","Headers","append","fetchJson","url","options","onCancel","response","fetch","status","payload","json","error","Promise","reject","message","data","name","console","stack","resolve","formatDateTime","dateString","year","month","day","hour","minute","Date","toLocaleDateString","undefined","listHomes","concat","getHomeWithRealtor","id","homeUrl","homeData","createHome","home","method","body","JSON","stringify","listRealtors"],"sources":["C:/Users/foliv/Desktop/homes/frontend/src/utils/api.js"],"sourcesContent":["const API_BASE_URL =\r\n    process.env.REACT_APP_API_BASE_URL || \"http://localhost:5001\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * @param {string} url - The URL for the request.\r\n * @param {object} options - Any options for the fetch.\r\n * @param {any} onCancel - Value to return if fetch call is aborted. Default value is undefined.\r\n * @returns {Promise<Error|any>} - A promise that resolves to the `json` data or an error.\r\n *                               If the response is not in the 200 - 399 range, the promise is rejected.\r\n */\r\nasync function fetchJson(url, options, onCancel) {\r\n    try {\r\n        const response = await fetch(url, options);\r\n\r\n        if (response.status === 204) {\r\n            return null; // No content\r\n        }\r\n\r\n        const payload = await response.json();\r\n\r\n        if (payload.error) {\r\n            return Promise.reject({ message: payload.error });\r\n        }\r\n\r\n        return payload.data;\r\n    } catch (error) {\r\n        if (error.name !== \"AbortError\") {\r\n            console.error(error.stack);\r\n            throw error;\r\n        }\r\n\r\n        return Promise.resolve(onCancel);\r\n    }\r\n}\r\n\r\n// utils/formatDate.js\r\nexport function formatDateTime(dateString) {\r\n    const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n}\r\n\r\n\r\n/**\r\n * GET request to retrieve a list of homes\r\n * @returns {Promise<Array>} - A promise that resolves to an array of home objects.\r\n */\r\nexport function listHomes() {\r\n    const url = `${API_BASE_URL}/homes`;\r\n    return fetchJson(url, { headers });\r\n}\r\n\r\n\r\nexport async function getHomeWithRealtor(id) {\r\n    try {\r\n        const homeUrl = `${API_BASE_URL}/homes/${id}`;\r\n        // Fetch the home data\r\n        const homeData = await fetchJson(homeUrl, { headers });\r\n        // Return the home data directly\r\n        return homeData;\r\n    } catch (error) {\r\n        console.error('Error fetching home with realtor:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * POST request to create a new home\r\n * @param {object} home - The home object to create.\r\n * @returns {Promise<object>} - A promise that resolves to the created home object.\r\n */\r\nexport function createHome(home) {\r\n    const url = `${API_BASE_URL}/homes`;\r\n    const options = {\r\n        method: \"POST\",\r\n        headers,\r\n        body: JSON.stringify(home),\r\n    };\r\n    return fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * GET request to retrieve a list of realtors\r\n * @returns {Promise<Array>} - A promise that resolves to an array of realtor objects.\r\n */\r\nexport function listRealtors() {\r\n    const url = `${API_BASE_URL}/realtors`;\r\n    return fetchJson(url, { headers });\r\n}\r\n\r\n// /**\r\n//  * PUT request to update a home by ID\r\n//  * @param {string} id - The ID of the home to update.\r\n//  * @param {object} home - The updated home object.\r\n//  * @returns {Promise<object>} - A promise that resolves to the updated home object.\r\n//  */\r\n// export function updateHome(id, home) {\r\n//     const url = `${API_BASE_URL}/homes/${id}`;\r\n//     const options = {\r\n//         method: \"PUT\",\r\n//         headers,\r\n//         body: JSON.stringify(home),\r\n//     };\r\n//     return fetchJson(url, options);\r\n// }\r\n\r\n// /**\r\n//  * DELETE request to delete a home by ID\r\n//  * @param {string} id - The ID of the home to delete.\r\n//  * @returns {Promise} - A promise that resolves when the deletion is successful.\r\n//  */\r\n// export function deleteHome(id) {\r\n//     const url = `${API_BASE_URL}/homes/${id}`;\r\n//     const options = {\r\n//         method: \"DELETE\",\r\n//         headers,\r\n//     };\r\n//     return fetchJson(url, options);\r\n// }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}